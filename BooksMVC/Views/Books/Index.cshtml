@model BooksMVC.Models.Books.GetBooksResponseModel


<h2>Our Huge Selection of Books</h2>

<ul class="list-unstyled">
    @foreach(var book in Model.Books)
    {
        <li>@book.Title by @book.Author <a asp-controller="Books" asp-action="Details" 
                                           asp-route-id="@book.Id" >Details</a></li>
    }
</ul>

@if(Model.BooksNotInInventory != null)
{
    <h3>The following books are not in Inventory</h3>
    <ul class="list-unstyled">
        @foreach (var book in Model.BooksNotInInventory)
        {
        <li>@book.Title by @book.Author <a asp-controller="Books" asp-action="Details" 
                                           asp-route-bookId="@book.Id">Details</a></li>
        }
    </ul>
}

<div class="alert alert-info">
    <p>
        There are @Model.NumberOfBooksInInventory books in inventory
        (We have @Model.NumberOfBooksNotInInventory currently out)
    </p>
</div>


@{ 
    bool DisableShowOnlyInInventory = Model.BooksNotInInventory == null;
    bool DisableShowAll = Model.BooksNotInInventory != null;
}

<div class="btn-group" role="group" aria-label="Filtering">
    @if (DisableShowAll)
    {
        <a asp-controller="Books" asp-action="Index" asp-route-showall="false" class="btn btn-secondary">Show Only In Inventory</a>
    }
    @if (DisableShowAll)
    {
        <a asp-controller="Books" asp-action="Index" asp-route-showall="true" class="btn btn-secondary">Show Both In and Out Of Inventory</a>
    }  
</div>